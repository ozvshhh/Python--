'''
마인크래프트 문제

핵심:
블럭을 부수는데 2초가 걸린다
블럭을 설치하는데 1초가 걸린다
인벤토리에 블럭이 없다면 블럭을 설치하는데 3초가 걸린다(블럭하나를 부수고 다시 설치해야하기 때문임)

우리가 판단해야 할 것은.
블럭을 설치할것인가?
블럭을 지울 것인가?

심플한 케이스에서 복잡한 케이스로 사고를 확장해야한다.
땅이 2*1인 경우에서 부터 사고를 확장시켜보자

(0,0) (1,0) 두 좌표가 있다
각각 7 10의 높이를 갖고 있고
인벤토리의 블럭은 무한하다.
블럭 3개 설치 -> 3초 최적의 해이다.
블럭을 설치하는 것이 제거하는 것 보다 빠르다.

인벤토리에 블럭이 하나도 없다
블럭 2개를 지우고 하나를 설치한다 -> 5초

블럭을 3개 지운다 -> 6초

블럭을 설치하는 것을 최 우선으로 두어야 한다.
인벤토리에 더 이상 블럭이 없다면 그 때에 블럭을 제거해야한다.

1.높이를 조정해야 하는가?
2.인벤토리에 블럭이 있는가?

좌표 위의 블럭을 분석하는 법
굳이 2차원으로 값을 받아야할까?
1차원으로 값을 받는 것이 가능하다.
그 편이 계산하기 편하다

높이의 최솟 값을 기준으로 두고 계산을 해보자
선택지는 두가지가 있다
최소 높이를 가진 층에 블럭을 하나 설치하는 것
최고 높이를 가진 층에서 블럭을 하나 제거하는 것
이런 방식을 이용한다면 시간복잡도가 너무 커진다.
정렬을 한다면 조금 나아질 수도 있다.

기준값을 어떻게 잡을까?
평균값?
중간값?
최빈값?
최빈값이 좋을 것 같은데..?
왜냐면 테스트케이스에서 최빈값을 썻거든
최빈값을 어떻게 찾을 수 있을까?
256칸의 배열을 생성한다.
갯수를 때려박는다
256칸의 배열이라 계산할 때 시간을 덜 먹는다.
'''

N,M,B = map(int,input().split())
h = [0 for i in range(256)]

#index 높이의 블럭의 갯수를 담은 리스트 h 선언
for i in range(N):
    a = list(map(int,input().split()))
    for i in range(len(a)):
        h[a[i]] += 1
        
many_value = max(h) #최빈값
many_index = h.index(max(h))
print(many_value)
print(many_index)

#1단계: 올바른 최빈값을 결정한다.
# 최빈값보다 작은 값들 * 높이편차 (비교) 최빈 값 보다 작은 값*(높이편차) + 인벤토리에 흙
# 전자가 크면 최빈값을 1 낮춰야한다
# 후자가 크면 그대로 진행시켜
for i in range(many_index):
    need = (many_index-i)*h[i]

for i in range(many_index+1,256+1,1):
    